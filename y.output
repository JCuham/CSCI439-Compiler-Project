Grammar

    0 $accept: prog $end

    1 prog: BEGINPROG codeblock ENDPROG

    2 codeblock: code
    3          | code codeblock

    4 $@1: %empty

    5 code: FOR $@1 condstmt cond condstmt NEWLINE START codeblock DONE

    6 $@2: %empty

    7 code: IF $@2 cond NEWLINE START NEWLINE codeblock DONE NEWLINE elsestmt
    8     | declare
    9     | printstmt
   10     | scanstmt
   11     | assign
   12     | NEWLINE

   13 $@3: %empty

   14 elsestmt: ELSE $@3 NEWLINE START NEWLINE codeblock DONE NEWLINE
   15         | %empty

   16 $@4: %empty

   17 printstmt: PRINT $@4 value NEWLINE

   18 $@5: %empty

   19 scanstmt: SCAN $@5 value value NEWLINE

   20 cond: BOOLTRUE
   21     | BOOLFALSE
   22     | value condop value

   23 value: REALLIT
   24      | INTLIT
   25      | CHARLIT
   26      | STRLIT
   27      | VARNAME

   28 condop: LTEQ
   29       | GTEQ
   30       | EQ
   31       | NEQ
   32       | GT
   33       | LT

   34 $@6: %empty

   35 declare: type VARNAME $@6 ASGN value NEWLINE

   36 $@7: %empty

   37 assign: VARNAME $@7 ASGN value NEWLINE

   38 $@8: %empty

   39 condstmt: type VARNAME $@8 ASGN value
   40         | value boolop value
   41         | value mathop value

   42 type: INT
   43     | CHAR
   44     | STRING
   45     | BOOL
   46     | REAL
   47     | EMPTY

   48 boolop: AND
   49       | OR

   50 mathop: PLUS
   51       | SUB
   52       | DIV
   53       | MULT


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    EMPTY (258) 47
    INT <node_object> (259) 42
    CHAR <node_object> (260) 43
    STRING <node_object> (261) 44
    BOOL <node_object> (262) 45
    REAL <node_object> (263) 46
    BEGINPROG <node_object> (264) 1
    ENDPROG <node_object> (265) 1
    START <node_object> (266) 5 7 14
    DONE <node_object> (267) 5 7 14
    IF <node_object> (268) 7
    ELSE <node_object> (269) 14
    FOR <node_object> (270) 5
    PRINT <node_object> (271) 17
    SCAN <node_object> (272) 19
    BOOLTRUE <node_object> (273) 20
    BOOLFALSE <node_object> (274) 21
    ASGN <node_object> (275) 35 37 39
    LTEQ <node_object> (276) 28
    GTEQ <node_object> (277) 29
    EQ <node_object> (278) 30
    NEQ <node_object> (279) 31
    GT <node_object> (280) 32
    LT <node_object> (281) 33
    AND <node_object> (282) 48
    OR <node_object> (283) 49
    PLUS <node_object> (284) 50
    SUB <node_object> (285) 51
    DIV <node_object> (286) 52
    MULT <node_object> (287) 53
    CHARLIT <node_object> (288) 25
    STRLIT <node_object> (289) 26
    REALLIT <node_object> (290) 23
    INTLIT <node_object> (291) 24
    VARNAME <node_object> (292) 27 35 37 39
    NEWLINE <node_object> (293) 5 7 12 14 17 19 35 37


Nonterminals, with rules where they appear

    $accept (39)
        on left: 0
    prog <node_object> (40)
        on left: 1
        on right: 0
    codeblock <node_object> (41)
        on left: 2 3
        on right: 1 3 5 7 14
    code <node_object> (42)
        on left: 5 7 8 9 10 11 12
        on right: 2 3
    $@1 (43)
        on left: 4
        on right: 5
    $@2 (44)
        on left: 6
        on right: 7
    elsestmt <node_object> (45)
        on left: 14 15
        on right: 7
    $@3 (46)
        on left: 13
        on right: 14
    printstmt <node_object> (47)
        on left: 17
        on right: 9
    $@4 (48)
        on left: 16
        on right: 17
    scanstmt <node_object> (49)
        on left: 19
        on right: 10
    $@5 (50)
        on left: 18
        on right: 19
    cond <node_object> (51)
        on left: 20 21 22
        on right: 5 7
    value <node_object> (52)
        on left: 23 24 25 26 27
        on right: 17 19 22 35 37 39 40 41
    condop <node_object> (53)
        on left: 28 29 30 31 32 33
        on right: 22
    declare <node_object> (54)
        on left: 35
        on right: 8
    $@6 (55)
        on left: 34
        on right: 35
    assign <node_object> (56)
        on left: 37
        on right: 11
    $@7 (57)
        on left: 36
        on right: 37
    condstmt <node_object> (58)
        on left: 39 40 41
        on right: 5
    $@8 (59)
        on left: 38
        on right: 39
    type <node_object> (60)
        on left: 42 43 44 45 46 47
        on right: 35 39
    boolop <node_object> (61)
        on left: 48 49
        on right: 40
    mathop <node_object> (62)
        on left: 50 51 52 53
        on right: 41


State 0

    0 $accept: • prog $end

    BEGINPROG  shift, and go to state 1

    prog  go to state 2


State 1

    1 prog: BEGINPROG • codeblock ENDPROG

    EMPTY    shift, and go to state 3
    INT      shift, and go to state 4
    CHAR     shift, and go to state 5
    STRING   shift, and go to state 6
    BOOL     shift, and go to state 7
    REAL     shift, and go to state 8
    IF       shift, and go to state 9
    FOR      shift, and go to state 10
    PRINT    shift, and go to state 11
    SCAN     shift, and go to state 12
    VARNAME  shift, and go to state 13
    NEWLINE  shift, and go to state 14

    codeblock  go to state 15
    code       go to state 16
    printstmt  go to state 17
    scanstmt   go to state 18
    declare    go to state 19
    assign     go to state 20
    type       go to state 21


State 2

    0 $accept: prog • $end

    $end  shift, and go to state 22


State 3

   47 type: EMPTY •

    $default  reduce using rule 47 (type)


State 4

   42 type: INT •

    $default  reduce using rule 42 (type)


State 5

   43 type: CHAR •

    $default  reduce using rule 43 (type)


State 6

   44 type: STRING •

    $default  reduce using rule 44 (type)


State 7

   45 type: BOOL •

    $default  reduce using rule 45 (type)


State 8

   46 type: REAL •

    $default  reduce using rule 46 (type)


State 9

    7 code: IF • $@2 cond NEWLINE START NEWLINE codeblock DONE NEWLINE elsestmt

    $default  reduce using rule 6 ($@2)

    $@2  go to state 23


State 10

    5 code: FOR • $@1 condstmt cond condstmt NEWLINE START codeblock DONE

    $default  reduce using rule 4 ($@1)

    $@1  go to state 24


State 11

   17 printstmt: PRINT • $@4 value NEWLINE

    $default  reduce using rule 16 ($@4)

    $@4  go to state 25


State 12

   19 scanstmt: SCAN • $@5 value value NEWLINE

    $default  reduce using rule 18 ($@5)

    $@5  go to state 26


State 13

   37 assign: VARNAME • $@7 ASGN value NEWLINE

    $default  reduce using rule 36 ($@7)

    $@7  go to state 27


State 14

   12 code: NEWLINE •

    $default  reduce using rule 12 (code)


State 15

    1 prog: BEGINPROG codeblock • ENDPROG

    ENDPROG  shift, and go to state 28


State 16

    2 codeblock: code •
    3          | code • codeblock

    EMPTY    shift, and go to state 3
    INT      shift, and go to state 4
    CHAR     shift, and go to state 5
    STRING   shift, and go to state 6
    BOOL     shift, and go to state 7
    REAL     shift, and go to state 8
    IF       shift, and go to state 9
    FOR      shift, and go to state 10
    PRINT    shift, and go to state 11
    SCAN     shift, and go to state 12
    VARNAME  shift, and go to state 13
    NEWLINE  shift, and go to state 14

    $default  reduce using rule 2 (codeblock)

    codeblock  go to state 29
    code       go to state 16
    printstmt  go to state 17
    scanstmt   go to state 18
    declare    go to state 19
    assign     go to state 20
    type       go to state 21


State 17

    9 code: printstmt •

    $default  reduce using rule 9 (code)


State 18

   10 code: scanstmt •

    $default  reduce using rule 10 (code)


State 19

    8 code: declare •

    $default  reduce using rule 8 (code)


State 20

   11 code: assign •

    $default  reduce using rule 11 (code)


State 21

   35 declare: type • VARNAME $@6 ASGN value NEWLINE

    VARNAME  shift, and go to state 30


State 22

    0 $accept: prog $end •

    $default  accept


State 23

    7 code: IF $@2 • cond NEWLINE START NEWLINE codeblock DONE NEWLINE elsestmt

    BOOLTRUE   shift, and go to state 31
    BOOLFALSE  shift, and go to state 32
    CHARLIT    shift, and go to state 33
    STRLIT     shift, and go to state 34
    REALLIT    shift, and go to state 35
    INTLIT     shift, and go to state 36
    VARNAME    shift, and go to state 37

    cond   go to state 38
    value  go to state 39


State 24

    5 code: FOR $@1 • condstmt cond condstmt NEWLINE START codeblock DONE

    EMPTY    shift, and go to state 3
    INT      shift, and go to state 4
    CHAR     shift, and go to state 5
    STRING   shift, and go to state 6
    BOOL     shift, and go to state 7
    REAL     shift, and go to state 8
    CHARLIT  shift, and go to state 33
    STRLIT   shift, and go to state 34
    REALLIT  shift, and go to state 35
    INTLIT   shift, and go to state 36
    VARNAME  shift, and go to state 37

    value     go to state 40
    condstmt  go to state 41
    type      go to state 42


State 25

   17 printstmt: PRINT $@4 • value NEWLINE

    CHARLIT  shift, and go to state 33
    STRLIT   shift, and go to state 34
    REALLIT  shift, and go to state 35
    INTLIT   shift, and go to state 36
    VARNAME  shift, and go to state 37

    value  go to state 43


State 26

   19 scanstmt: SCAN $@5 • value value NEWLINE

    CHARLIT  shift, and go to state 33
    STRLIT   shift, and go to state 34
    REALLIT  shift, and go to state 35
    INTLIT   shift, and go to state 36
    VARNAME  shift, and go to state 37

    value  go to state 44


State 27

   37 assign: VARNAME $@7 • ASGN value NEWLINE

    ASGN  shift, and go to state 45


State 28

    1 prog: BEGINPROG codeblock ENDPROG •

    $default  reduce using rule 1 (prog)


State 29

    3 codeblock: code codeblock •

    $default  reduce using rule 3 (codeblock)


State 30

   35 declare: type VARNAME • $@6 ASGN value NEWLINE

    $default  reduce using rule 34 ($@6)

    $@6  go to state 46


State 31

   20 cond: BOOLTRUE •

    $default  reduce using rule 20 (cond)


State 32

   21 cond: BOOLFALSE •

    $default  reduce using rule 21 (cond)


State 33

   25 value: CHARLIT •

    $default  reduce using rule 25 (value)


State 34

   26 value: STRLIT •

    $default  reduce using rule 26 (value)


State 35

   23 value: REALLIT •

    $default  reduce using rule 23 (value)


State 36

   24 value: INTLIT •

    $default  reduce using rule 24 (value)


State 37

   27 value: VARNAME •

    $default  reduce using rule 27 (value)


State 38

    7 code: IF $@2 cond • NEWLINE START NEWLINE codeblock DONE NEWLINE elsestmt

    NEWLINE  shift, and go to state 47


State 39

   22 cond: value • condop value

    LTEQ  shift, and go to state 48
    GTEQ  shift, and go to state 49
    EQ    shift, and go to state 50
    NEQ   shift, and go to state 51
    GT    shift, and go to state 52
    LT    shift, and go to state 53

    condop  go to state 54


State 40

   40 condstmt: value • boolop value
   41         | value • mathop value

    AND   shift, and go to state 55
    OR    shift, and go to state 56
    PLUS  shift, and go to state 57
    SUB   shift, and go to state 58
    DIV   shift, and go to state 59
    MULT  shift, and go to state 60

    boolop  go to state 61
    mathop  go to state 62


State 41

    5 code: FOR $@1 condstmt • cond condstmt NEWLINE START codeblock DONE

    BOOLTRUE   shift, and go to state 31
    BOOLFALSE  shift, and go to state 32
    CHARLIT    shift, and go to state 33
    STRLIT     shift, and go to state 34
    REALLIT    shift, and go to state 35
    INTLIT     shift, and go to state 36
    VARNAME    shift, and go to state 37

    cond   go to state 63
    value  go to state 39


State 42

   39 condstmt: type • VARNAME $@8 ASGN value

    VARNAME  shift, and go to state 64


State 43

   17 printstmt: PRINT $@4 value • NEWLINE

    NEWLINE  shift, and go to state 65


State 44

   19 scanstmt: SCAN $@5 value • value NEWLINE

    CHARLIT  shift, and go to state 33
    STRLIT   shift, and go to state 34
    REALLIT  shift, and go to state 35
    INTLIT   shift, and go to state 36
    VARNAME  shift, and go to state 37

    value  go to state 66


State 45

   37 assign: VARNAME $@7 ASGN • value NEWLINE

    CHARLIT  shift, and go to state 33
    STRLIT   shift, and go to state 34
    REALLIT  shift, and go to state 35
    INTLIT   shift, and go to state 36
    VARNAME  shift, and go to state 37

    value  go to state 67


State 46

   35 declare: type VARNAME $@6 • ASGN value NEWLINE

    ASGN  shift, and go to state 68


State 47

    7 code: IF $@2 cond NEWLINE • START NEWLINE codeblock DONE NEWLINE elsestmt

    START  shift, and go to state 69


State 48

   28 condop: LTEQ •

    $default  reduce using rule 28 (condop)


State 49

   29 condop: GTEQ •

    $default  reduce using rule 29 (condop)


State 50

   30 condop: EQ •

    $default  reduce using rule 30 (condop)


State 51

   31 condop: NEQ •

    $default  reduce using rule 31 (condop)


State 52

   32 condop: GT •

    $default  reduce using rule 32 (condop)


State 53

   33 condop: LT •

    $default  reduce using rule 33 (condop)


State 54

   22 cond: value condop • value

    CHARLIT  shift, and go to state 33
    STRLIT   shift, and go to state 34
    REALLIT  shift, and go to state 35
    INTLIT   shift, and go to state 36
    VARNAME  shift, and go to state 37

    value  go to state 70


State 55

   48 boolop: AND •

    $default  reduce using rule 48 (boolop)


State 56

   49 boolop: OR •

    $default  reduce using rule 49 (boolop)


State 57

   50 mathop: PLUS •

    $default  reduce using rule 50 (mathop)


State 58

   51 mathop: SUB •

    $default  reduce using rule 51 (mathop)


State 59

   52 mathop: DIV •

    $default  reduce using rule 52 (mathop)


State 60

   53 mathop: MULT •

    $default  reduce using rule 53 (mathop)


State 61

   40 condstmt: value boolop • value

    CHARLIT  shift, and go to state 33
    STRLIT   shift, and go to state 34
    REALLIT  shift, and go to state 35
    INTLIT   shift, and go to state 36
    VARNAME  shift, and go to state 37

    value  go to state 71


State 62

   41 condstmt: value mathop • value

    CHARLIT  shift, and go to state 33
    STRLIT   shift, and go to state 34
    REALLIT  shift, and go to state 35
    INTLIT   shift, and go to state 36
    VARNAME  shift, and go to state 37

    value  go to state 72


State 63

    5 code: FOR $@1 condstmt cond • condstmt NEWLINE START codeblock DONE

    EMPTY    shift, and go to state 3
    INT      shift, and go to state 4
    CHAR     shift, and go to state 5
    STRING   shift, and go to state 6
    BOOL     shift, and go to state 7
    REAL     shift, and go to state 8
    CHARLIT  shift, and go to state 33
    STRLIT   shift, and go to state 34
    REALLIT  shift, and go to state 35
    INTLIT   shift, and go to state 36
    VARNAME  shift, and go to state 37

    value     go to state 40
    condstmt  go to state 73
    type      go to state 42


State 64

   39 condstmt: type VARNAME • $@8 ASGN value

    $default  reduce using rule 38 ($@8)

    $@8  go to state 74


State 65

   17 printstmt: PRINT $@4 value NEWLINE •

    $default  reduce using rule 17 (printstmt)


State 66

   19 scanstmt: SCAN $@5 value value • NEWLINE

    NEWLINE  shift, and go to state 75


State 67

   37 assign: VARNAME $@7 ASGN value • NEWLINE

    NEWLINE  shift, and go to state 76


State 68

   35 declare: type VARNAME $@6 ASGN • value NEWLINE

    CHARLIT  shift, and go to state 33
    STRLIT   shift, and go to state 34
    REALLIT  shift, and go to state 35
    INTLIT   shift, and go to state 36
    VARNAME  shift, and go to state 37

    value  go to state 77


State 69

    7 code: IF $@2 cond NEWLINE START • NEWLINE codeblock DONE NEWLINE elsestmt

    NEWLINE  shift, and go to state 78


State 70

   22 cond: value condop value •

    $default  reduce using rule 22 (cond)


State 71

   40 condstmt: value boolop value •

    $default  reduce using rule 40 (condstmt)


State 72

   41 condstmt: value mathop value •

    $default  reduce using rule 41 (condstmt)


State 73

    5 code: FOR $@1 condstmt cond condstmt • NEWLINE START codeblock DONE

    NEWLINE  shift, and go to state 79


State 74

   39 condstmt: type VARNAME $@8 • ASGN value

    ASGN  shift, and go to state 80


State 75

   19 scanstmt: SCAN $@5 value value NEWLINE •

    $default  reduce using rule 19 (scanstmt)


State 76

   37 assign: VARNAME $@7 ASGN value NEWLINE •

    $default  reduce using rule 37 (assign)


State 77

   35 declare: type VARNAME $@6 ASGN value • NEWLINE

    NEWLINE  shift, and go to state 81


State 78

    7 code: IF $@2 cond NEWLINE START NEWLINE • codeblock DONE NEWLINE elsestmt

    EMPTY    shift, and go to state 3
    INT      shift, and go to state 4
    CHAR     shift, and go to state 5
    STRING   shift, and go to state 6
    BOOL     shift, and go to state 7
    REAL     shift, and go to state 8
    IF       shift, and go to state 9
    FOR      shift, and go to state 10
    PRINT    shift, and go to state 11
    SCAN     shift, and go to state 12
    VARNAME  shift, and go to state 13
    NEWLINE  shift, and go to state 14

    codeblock  go to state 82
    code       go to state 16
    printstmt  go to state 17
    scanstmt   go to state 18
    declare    go to state 19
    assign     go to state 20
    type       go to state 21


State 79

    5 code: FOR $@1 condstmt cond condstmt NEWLINE • START codeblock DONE

    START  shift, and go to state 83


State 80

   39 condstmt: type VARNAME $@8 ASGN • value

    CHARLIT  shift, and go to state 33
    STRLIT   shift, and go to state 34
    REALLIT  shift, and go to state 35
    INTLIT   shift, and go to state 36
    VARNAME  shift, and go to state 37

    value  go to state 84


State 81

   35 declare: type VARNAME $@6 ASGN value NEWLINE •

    $default  reduce using rule 35 (declare)


State 82

    7 code: IF $@2 cond NEWLINE START NEWLINE codeblock • DONE NEWLINE elsestmt

    DONE  shift, and go to state 85


State 83

    5 code: FOR $@1 condstmt cond condstmt NEWLINE START • codeblock DONE

    EMPTY    shift, and go to state 3
    INT      shift, and go to state 4
    CHAR     shift, and go to state 5
    STRING   shift, and go to state 6
    BOOL     shift, and go to state 7
    REAL     shift, and go to state 8
    IF       shift, and go to state 9
    FOR      shift, and go to state 10
    PRINT    shift, and go to state 11
    SCAN     shift, and go to state 12
    VARNAME  shift, and go to state 13
    NEWLINE  shift, and go to state 14

    codeblock  go to state 86
    code       go to state 16
    printstmt  go to state 17
    scanstmt   go to state 18
    declare    go to state 19
    assign     go to state 20
    type       go to state 21


State 84

   39 condstmt: type VARNAME $@8 ASGN value •

    $default  reduce using rule 39 (condstmt)


State 85

    7 code: IF $@2 cond NEWLINE START NEWLINE codeblock DONE • NEWLINE elsestmt

    NEWLINE  shift, and go to state 87


State 86

    5 code: FOR $@1 condstmt cond condstmt NEWLINE START codeblock • DONE

    DONE  shift, and go to state 88


State 87

    7 code: IF $@2 cond NEWLINE START NEWLINE codeblock DONE NEWLINE • elsestmt

    ELSE  shift, and go to state 89

    $default  reduce using rule 15 (elsestmt)

    elsestmt  go to state 90


State 88

    5 code: FOR $@1 condstmt cond condstmt NEWLINE START codeblock DONE •

    $default  reduce using rule 5 (code)


State 89

   14 elsestmt: ELSE • $@3 NEWLINE START NEWLINE codeblock DONE NEWLINE

    $default  reduce using rule 13 ($@3)

    $@3  go to state 91


State 90

    7 code: IF $@2 cond NEWLINE START NEWLINE codeblock DONE NEWLINE elsestmt •

    $default  reduce using rule 7 (code)


State 91

   14 elsestmt: ELSE $@3 • NEWLINE START NEWLINE codeblock DONE NEWLINE

    NEWLINE  shift, and go to state 92


State 92

   14 elsestmt: ELSE $@3 NEWLINE • START NEWLINE codeblock DONE NEWLINE

    START  shift, and go to state 93


State 93

   14 elsestmt: ELSE $@3 NEWLINE START • NEWLINE codeblock DONE NEWLINE

    NEWLINE  shift, and go to state 94


State 94

   14 elsestmt: ELSE $@3 NEWLINE START NEWLINE • codeblock DONE NEWLINE

    EMPTY    shift, and go to state 3
    INT      shift, and go to state 4
    CHAR     shift, and go to state 5
    STRING   shift, and go to state 6
    BOOL     shift, and go to state 7
    REAL     shift, and go to state 8
    IF       shift, and go to state 9
    FOR      shift, and go to state 10
    PRINT    shift, and go to state 11
    SCAN     shift, and go to state 12
    VARNAME  shift, and go to state 13
    NEWLINE  shift, and go to state 14

    codeblock  go to state 95
    code       go to state 16
    printstmt  go to state 17
    scanstmt   go to state 18
    declare    go to state 19
    assign     go to state 20
    type       go to state 21


State 95

   14 elsestmt: ELSE $@3 NEWLINE START NEWLINE codeblock • DONE NEWLINE

    DONE  shift, and go to state 96


State 96

   14 elsestmt: ELSE $@3 NEWLINE START NEWLINE codeblock DONE • NEWLINE

    NEWLINE  shift, and go to state 97


State 97

   14 elsestmt: ELSE $@3 NEWLINE START NEWLINE codeblock DONE NEWLINE •

    $default  reduce using rule 14 (elsestmt)
